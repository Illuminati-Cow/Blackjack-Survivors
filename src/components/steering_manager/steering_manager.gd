class_name Steering_Manager extends Node
# Reference: https://code.tutsplus.com/understanding-steering-behaviors-movement-manager--gamedev-4278t

# Signals

# Public properties
var steering_force : Vector2

# Private properties
var _host : CharacterBody2D
var _max_speed : float
var _max_force : float
var _mass : float

func _init(host : CharacterBody2D, max_speed : float, max_force : float, mass : float = 1):
	_host = host
	steering_force = Vector2.ZERO
	_max_speed = max_speed
	_max_force = max_force
	_mass = 1

func seek(target):
	steering_force += _do_seek(target)

func _do_seek(target) -> Vector2:
	var force = 0
	var desired_velocity : Vector2 = target - _host.position
	desired_velocity = _truncate(desired_velocity, _max_speed)
	force = desired_velocity - _host.velocity
	return force

func flee(target):
	assert("position" in target)
	steering_force -= seek(target)

func pursue(target):
	assert("position" in target)
	steering_force += _do_pursue(target)
	
func _do_pursue(target) -> Vector2:
	var force = 0
	var host_v = _host.velocity
	var t_pos = target.position
	
	if "velocity" in target:
		var t_vel = target.velocity
		var lead_factor = _host.position.distance_to(t_pos) / _max_speed
		var lead_pos = t_pos + t_vel * lead_factor
		t_pos = lead_pos
	
	return seek(t_pos)
	
# Applies the steering forces generated by behaviors called this frame to the
# host's current velocity and then moves it.
# NOTE: Should be called every physics process update that movement is desired	
func move(delta):
	steering_force = _truncate(steering_force, _max_force) * 1 / _mass
	steering_force *= delta
	_host.velocity += steering_force
	_host.velocity = _truncate(_host.velocity, _max_speed)
	_host.move_and_slide()
	steering_force = Vector2.ZERO

# Truncates the vector to a maximum length of the argument max.
func _truncate(vector : Vector2, max : float) -> Vector2:
	var v_len = vector.length()
	if v_len > max:
		return vector.normalized() * max
	return vector
